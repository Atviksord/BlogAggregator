// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: getpostbyuser.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getPostByUser = `-- name: GetPostByUser :many
SELECT title,description,url,published_at FROM posts
INNER JOIN feeds_follow ON posts.feed_id = feeds_follow.feed_id
WHERE feeds_follow.user_id = $1

ORDER BY published_at DESC
LIMIT $2
`

type GetPostByUserParams struct {
	UserID uuid.UUID
	Limit  int32
}

type GetPostByUserRow struct {
	Title       string
	Description string
	Url         string
	PublishedAt time.Time
}

func (q *Queries) GetPostByUser(ctx context.Context, arg GetPostByUserParams) ([]GetPostByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostByUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostByUserRow
	for rows.Next() {
		var i GetPostByUserRow
		if err := rows.Scan(
			&i.Title,
			&i.Description,
			&i.Url,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
